import telebot
import logging
from django.core.management.base import BaseCommand
from telebot.types import Message, CallbackQuery
from main.models import User, Event, Attendance, TelegramChannel
from event_bot import settings
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from main.keyboards import (
    main_menu_keyboard,
    category_keyboard,
    attendance_keyboard,
    back_to_main_menu_keyboard,
    my_events_keyboard,
    my_events_category_keyboard,
    my_event_actions_keyboard,
    private_channels_keyboard
)
from datetime import datetime, timedelta
import calendar
from django.db import transaction
from django.core.exceptions import ObjectDoesNotExist
from django.core.cache import cache
import threading
import time
from functools import lru_cache
from django.db.models import Q

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
bot = telebot.TeleBot(settings.TOKENBOT, parse_mode="HTML")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_selection = {}
# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
STATE_LIFETIME = 3600  # 1 —á–∞—Å
# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CACHE_LIFETIME = 300  # 5 –º–∏–Ω—É—Ç

@lru_cache(maxsize=100)
def get_event_cache_key(event_type, category):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    return f"events_{event_type}_{category}"

def get_cached_events(event_type, category):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    cache_key = get_event_cache_key(event_type, category)
    events = cache.get(cache_key)
    
    if events is None:
        events = list(Event.objects.filter(
            event_type=event_type,
            category=category,
            date_time__gte=datetime.now()
        ).order_by("date_time"))
        cache.set(cache_key, events, CACHE_LIFETIME)
        logger.info(f"Updated cache for {event_type} {category}")
    
    return events

def invalidate_event_cache(event_type=None, category=None):
    """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    if event_type and category:
        cache_key = get_event_cache_key(event_type, category)
        cache.delete(cache_key)
    else:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        for event_type in Event.EVENT_TYPE_CHOICES:
            for category in Event.CATEGORY_CHOICES:
                cache_key = get_event_cache_key(event_type[0], category[0])
                cache.delete(cache_key)
    logger.info("Event cache invalidated")

@lru_cache(maxsize=100)
def get_user_events_cache_key(user_id, status):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return f"user_events_{user_id}_{status}"

def get_cached_user_events(user_id, status):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    cache_key = get_user_events_cache_key(user_id, status)
    events = cache.get(cache_key)
    
    if events is None:
        events = list(Event.objects.filter(
            attendance__user__telegram_id=str(user_id),
            attendance__status=status,
            date_time__gte=datetime.now()
        ).order_by("date_time"))
        cache.set(cache_key, events, CACHE_LIFETIME)
        logger.info(f"Updated user events cache for {user_id} {status}")
    
    return events

def invalidate_user_events_cache(user_id=None, status=None):
    """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id and status:
        cache_key = get_user_events_cache_key(user_id, status)
        cache.delete(cache_key)
    else:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in User.objects.all():
            for status in ['going', 'maybe']:
                cache_key = get_user_events_cache_key(user.telegram_id, status)
                cache.delete(cache_key)
    logger.info("User events cache invalidated")

def cleanup_old_states():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    current_time = time.time()
    expired_users = [
        user_id for user_id, state in user_selection.items()
        if current_time - state.get('timestamp', 0) > STATE_LIFETIME
    ]
    for user_id in expired_users:
        del user_selection[user_id]
        logger.info(f"Cleaned up state for user {user_id}")

def update_user_state(user_id, data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_selection[user_id] = {
        **data,
        'timestamp': time.time()
    }
    logger.info(f"Updated user {user_id} state: {data}")

def get_user_state(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = user_selection.get(user_id)
    if state and time.time() - state.get('timestamp', 0) > STATE_LIFETIME:
        del user_selection[user_id]
        return None
    logger.info(f"Retrieved user {user_id} state: {state}")
    return state

def start_cleanup_thread():
    """–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    def cleanup_loop():
        while True:
            cleanup_old_states()
            time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    thread = threading.Thread(target=cleanup_loop, daemon=True)
    thread.start()
    return thread

def handle_error(chat_id, error_message, original_message=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logger.error(f"Error in chat {chat_id}: {error_message}")
    if original_message:
        logger.error(f"Original message: {original_message}")
    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=main_menu_keyboard())

def safe_delete_last_message(chat_id, user_id):
    state = get_user_state(user_id)
    if state and state.get('last_message_id'):
        try:
            bot.delete_message(chat_id, state['last_message_id'])
        except Exception:
            pass

def send_and_store_message(chat_id, user_id, *args, keep_message=False, **kwargs):
    if not keep_message:
        safe_delete_last_message(chat_id, user_id)
    msg = bot.send_message(chat_id, *args, **kwargs)
    if not keep_message:
        state = get_user_state(user_id) or {}
        state['last_message_id'] = msg.message_id
        update_user_state(user_id, state)
    return msg

@bot.message_handler(commands=["start"])
def start(message: Message):
    try:
        telegram_id = str(message.from_user.id)
        username = message.from_user.username
        with transaction.atomic():
            user, created = User.objects.get_or_create(
                telegram_id=telegram_id,
                defaults={"username": username}
            )
        text = f"–ü—Ä–∏–≤–µ—Ç, {username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üéâ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ." if created else \
               f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üî•"
        send_and_store_message(message.chat.id, message.from_user.id, text, keep_message=True)
        send_and_store_message(message.chat.id, message.from_user.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=main_menu_keyboard())
        logger.info(f"User {telegram_id} started the bot")
    except Exception as e:
        handle_error(message.chat.id, str(e), message.text)

@bot.callback_query_handler(func=lambda call: call.data == "back_main")
def back_to_main(call: CallbackQuery):
    try:
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = get_user_state(call.from_user.id) or {}
        state.pop('events', None)
        update_user_state(call.from_user.id, state)
        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("event_type_"))
def select_event_type(call: CallbackQuery):
    try:
        # Delete the current message
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        event_type = call.data.split("_")[2]
        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {event_type} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=category_keyboard(event_type)
        )
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def select_category(call: CallbackQuery):
    try:
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        event_type = call.data.split("_")[1]
        category = call.data.split("_")[2]
        user = User.objects.get(telegram_id=str(call.from_user.id))
        # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω
        attending_events = set(Event.objects.filter(
            attendance__user=user,
            attendance__status="going"
        ).values_list('id', flat=True))
        events = list(Event.objects.filter(
            event_type=event_type,
            category=category,
            date_time__gte=datetime.now()
        ).exclude(id__in=attending_events).order_by("date_time"))
        if not events:
            send_and_store_message(
                call.message.chat.id,
                call.from_user.id,
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=back_to_main_menu_keyboard()
            )
            return
        message = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ {category} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ({event_type}):\n\n"
        for i, event in enumerate(events, 1):
            message += f"{i}. {event.name}\n"
            message += f"   üìÖ {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"   üìç {event.location}\n"
            if event.address:
                message += f"   üè† {event.address}\n"
            if event.link_2gis:
                message += f"   üó∫Ô∏è {event.link_2gis}\n"
            message += "\n"
        # Save events in state
        state = get_user_state(call.from_user.id) or {}
        state["events"] = events
        update_user_state(call.from_user.id, state)
        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            message,
            reply_markup=back_to_main_menu_keyboard()
        )
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("going_"))
def mark_attendance(call: CallbackQuery):
    try:
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        event_id = call.data.replace("going_", "")
        with transaction.atomic():
            user = User.objects.get(telegram_id=str(call.from_user.id))
            event = Event.objects.get(id=int(event_id))
            attendance, created = Attendance.objects.update_or_create(
                user=user,
                event=event,
                defaults={"status": "going"}
            )
        invalidate_user_events_cache(user.telegram_id, "going")
        send_and_store_message(call.message.chat.id, call.from_user.id, "‚úÖ –¢—ã –æ—Ç–º–µ—Ç–∏–ª —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ.", keep_message=True)
        send_and_store_message(call.message.chat.id, call.from_user.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=main_menu_keyboard())
        logger.info(f"User {call.from_user.id} marked attendance for event {event_id}")
    except ObjectDoesNotExist:
        handle_error(call.message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", call.data)
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.data)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_status_"))
def edit_status(call: CallbackQuery):
    try:
        # Delete the current message
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        
        _, _, action, event_id = call.data.split("_", 3)
        user = User.objects.get(telegram_id=str(call.from_user.id))
        
        with transaction.atomic():
            try:
                attendance = Attendance.objects.get(user=user, event__id=event_id)
            except Attendance.DoesNotExist:
                send_and_store_message(call.message.chat.id, call.from_user.id, "–£—á–∞—Å—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            if action == "going":
                old_status = attendance.status
                attendance.status = "going"
                attendance.save()
                
                # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
                invalidate_user_events_cache(user.telegram_id, "going")
                invalidate_user_events_cache(user.telegram_id, old_status)
                
                send_and_store_message(call.message.chat.id, call.from_user.id, "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '–ò–¥—É'.", 
                               reply_markup=main_menu_keyboard())
            elif action == "delete":
                old_status = attendance.status
                attendance.delete()
                
                # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
                invalidate_user_events_cache(user.telegram_id, old_status)
                
                send_and_store_message(call.message.chat.id, call.from_user.id, "üóë –£—á–∞—Å—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu_keyboard())
            else:
                send_and_store_message(call.message.chat.id, call.from_user.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        
        logger.info(f"User {call.from_user.id} {action}ed attendance for event {event_id}")
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.data)

@bot.callback_query_handler(func=lambda call: call.data == "maybe_events")
def show_maybe_categories(call: CallbackQuery):
    try:
        # Delete the current message
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        
        user = User.objects.get(telegram_id=str(call.from_user.id))
        events = get_cached_user_events(call.from_user.id, "maybe")

        if not events:
            send_and_store_message(call.message.chat.id, call.from_user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=back_to_main_menu_keyboard())
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for event in events:
            if event.category not in categories:
                categories[event.category] = []
            categories[event.category].append(event)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        markup = InlineKeyboardMarkup()
        for category in categories.keys():
            display = dict(Event.CATEGORY_CHOICES).get(category, category)
            markup.add(InlineKeyboardButton(f"{display}", callback_data=f"maybe_cat_{category}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
        
        send_and_store_message(call.message.chat.id, call.from_user.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=markup)
        logger.info(f"User {call.from_user.id} viewed maybe events categories")
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.data)

@bot.callback_query_handler(func=lambda call: call.data.startswith("maybe_cat_"))
def maybe_category_events(call: CallbackQuery):
    try:
        # Delete the current message
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        
        category = call.data.replace("maybe_cat_", "")
        events = get_cached_user_events(call.from_user.id, "maybe")
        
        if not events:
            send_and_store_message(
                call.message.chat.id,
                call.from_user.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=back_to_main_menu_keyboard()
            )
            return

        message = f"–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
        category_events = [event for event in events if event.category == category]
        
        if not category_events:
            send_and_store_message(
                call.message.chat.id,
                call.from_user.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=back_to_main_menu_keyboard()
            )
            return
            
        for i, event in enumerate(category_events, 1):
            message += f"{i}. {event.name}\n"
            message += f"   üìÖ {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"   üìç {event.location}\n"
            if event.address:
                message += f"   üè† {event.address}\n"
            if event.link_2gis:
                message += f"   üó∫Ô∏è {event.link_2gis}\n"
            message += "\n"

        # Save events in state
        state = get_user_state(call.from_user.id) or {}
        state["events"] = category_events
        update_user_state(call.from_user.id, state)

        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            message,
            reply_markup=back_to_main_menu_keyboard()
        )
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.data)

@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_event_number(message: Message):
    try:
        user_id = message.from_user.id
        number = int(message.text)
        state = get_user_state(user_id)
        
        if not state:
            send_and_store_message(message.chat.id, message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=main_menu_keyboard())
            return

        events = None
        if "events" in state:
            events = state["events"]
        
        if not events:
            send_and_store_message(message.chat.id, message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=back_to_main_menu_keyboard())
            return

        if number < 1 or number > len(events):
            send_and_store_message(message.chat.id, message.from_user.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(events)}.")
            return

        event = events[number - 1]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        text = f"<b>{event.name}</b>\n"
        text += f"üìç {event.location}, {event.address}\n"
        text += f"üìÖ {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        if event.details:
            text += f"üìù {event.details}\n"
        if event.link_2gis:
            text += f"üîó <a href='{event.link_2gis}'>–°—Å—ã–ª–∫–∞ –Ω–∞ 2–ì–ò–°</a>"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        try:
            attendance = Attendance.objects.get(user__telegram_id=str(user_id), event=event)
            markup = my_event_actions_keyboard(event.id)
        except Attendance.DoesNotExist:
            markup = attendance_keyboard(event.id)

        send_and_store_message(message.chat.id, message.from_user.id, text, reply_markup=markup, parse_mode="HTML")
    except Exception as e:
        handle_error(message.chat.id, str(e), message.text)

@bot.message_handler(func=lambda message: True)
def fallback_handler(message: Message):
    send_and_store_message(message.chat.id, message.from_user.id, "‚õîÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
    send_and_store_message(message.chat.id, message.from_user.id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=main_menu_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "my_events")
def show_my_events_categories(call: CallbackQuery):
    try:
        # Delete the current message
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        
        # Get user's events
        events = get_cached_user_events(call.from_user.id, "going")
        
        if not events:
            send_and_store_message(
                call.message.chat.id,
                call.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏–¥—ë—Ç–µ.",
                reply_markup=back_to_main_menu_keyboard()
            )
            return
            
        # Group events by category
        categories = {}
        for event in events:
            if event.category not in categories:
                categories[event.category] = []
            categories[event.category].append(event)
            
        # Create keyboard with categories
        markup = InlineKeyboardMarkup()
        for category in categories.keys():
            display = dict(Event.CATEGORY_CHOICES).get(category, category)
            markup.add(InlineKeyboardButton(display, callback_data=f"my_cat_{category}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
        
        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=markup
        )
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("my_cat_"))
def show_my_category_events(call: CallbackQuery):
    try:
        # Delete the current message
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        
        category = call.data.split("_")[2]
        events = get_cached_user_events(call.from_user.id, "going")
        
        if not events:
            send_and_store_message(
                call.message.chat.id,
                call.from_user.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=back_to_main_menu_keyboard()
            )
            return

        category_events = [event for event in events if event.category == category]
        
        if not category_events:
            send_and_store_message(
                call.message.chat.id,
                call.from_user.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=back_to_main_menu_keyboard()
            )
            return

        message = f"–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {dict(Event.CATEGORY_CHOICES).get(category, category)}:\n\n"
        for i, event in enumerate(category_events, 1):
            message += f"{i}. {event.name}\n"
            message += f"   üìÖ {event.date_time.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"   üìç {event.location}\n"
            if event.address:
                message += f"   üè† {event.address}\n"
            if event.link_2gis:
                message += f"   üó∫Ô∏è {event.link_2gis}\n"
            message += "\n"

        # Save events in state
        state = get_user_state(call.from_user.id) or {}
        state["events"] = category_events
        update_user_state(call.from_user.id, state)

        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            message,
            reply_markup=back_to_main_menu_keyboard()
        )
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.message)

# @bot.callback_query_handler(func=lambda call: call.data.startswith("buy_ticket_"))
# def handle_buy_ticket(call: CallbackQuery):
#     try:
#         event_id = call.data.replace("buy_ticket_", "")
#         event = Event.objects.get(id=event_id)
#         
#         if event.ticket_link:
#             send_and_store_message(
#                 call.message.chat.id,
#                 call.from_user.id,
#                 f"üé´ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞: {event.ticket_link}",
#                 reply_markup=back_to_main_menu_keyboard()
#             )
#         else:
#             send_and_store_message(
#                 call.message.chat.id,
#                 call.from_user.id,
#                 "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
#                 reply_markup=back_to_main_menu_keyboard()
#             )
#     except Exception as e:
#         logger.error(f"Error in handle_buy_ticket: {str(e)}")
#         send_and_store_message(
#             call.message.chat.id,
#             call.from_user.id,
#             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
#             reply_markup=back_to_main_menu_keyboard()
#         )

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_attendance_"))
def handle_cancel_attendance(call: CallbackQuery):
    try:
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        event_id = call.data.replace("cancel_attendance_", "")
        user = User.objects.get(telegram_id=str(call.from_user.id))
        event = Event.objects.get(id=event_id)
        Attendance.objects.filter(user=user, event=event).delete()
        invalidate_user_events_cache(user.telegram_id, "going")
        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            "‚ùå –¢—ã –æ—Ç–º–µ–Ω–∏–ª —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.",
            keep_message=True
        )
        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=main_menu_keyboard()
        )
        logger.info(f"User {call.from_user.id} cancelled attendance for event {event_id}")
    except Exception as e:
        logger.error(f"Error in handle_cancel_attendance: {str(e)}")
        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—á–∞—Å—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_main_menu_keyboard()
        )

@bot.callback_query_handler(func=lambda call: call.data == "private_events")
def show_private_channels(call: CallbackQuery):
    try:
        # Delete the current message
        safe_delete_last_message(call.message.chat.id, call.from_user.id)
        channels = TelegramChannel.objects.all()
        if not channels:
            send_and_store_message(
                call.message.chat.id,
                call.from_user.id,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
                reply_markup=back_to_main_menu_keyboard()
            )
            return

        send_and_store_message(
            call.message.chat.id,
            call.from_user.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:",
            reply_markup=private_channels_keyboard(channels)
        )
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("private_channel_"))
def show_private_channel_events(call: CallbackQuery):
    try:
        channel_id = call.data.replace("private_channel_", "")
        channel = TelegramChannel.objects.get(id=channel_id)
        
        # Get user's attending events
        user = User.objects.get(telegram_id=str(call.from_user.id))
        attending_events = set(Event.objects.filter(
            attendance__user=user,
            attendance__status="going"
        ).values_list('id', flat=True))
        
        # Get events for this channel, excluding those user is already attending
        events = Event.objects.filter(
            channel=channel,
            is_private=True,
            date_time__gte=datetime.now()
        ).exclude(id__in=attending_events).order_by("date_time")
        
        if not events:
            send_and_store_message(call.message.chat.id, call.from_user.id, f"–í –∫–∞–Ω–∞–ª–µ {channel.name} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=back_to_main_menu_keyboard())
            return
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º
        event_types = {}
        for event in events:
            if event.event_type not in event_types:
                event_types[event.event_type] = []
            event_types[event.event_type].append(event)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        markup = InlineKeyboardMarkup()
        for event_type in event_types.keys():
            display = dict(Event.EVENT_TYPE_CHOICES).get(event_type, event_type)
            markup.add(InlineKeyboardButton(f"{display}", callback_data=f"private_type_{channel_id}_{event_type}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
        
        # Save channel_id in state
        state = get_user_state(call.from_user.id) or {}
        state["private_channel_id"] = channel_id
        state["private_events"] = {et: list(evs) for et, evs in event_types.items()}
        update_user_state(call.from_user.id, state)
        
        send_and_store_message(call.message.chat.id, call.from_user.id, f"–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel.name}:", reply_markup=markup)
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.data)

@bot.callback_query_handler(func=lambda call: call.data.startswith("private_type_"))
def show_private_type_categories(call: CallbackQuery):
    try:
        _, _, channel_id, event_type = call.data.split("_")
        channel = TelegramChannel.objects.get(id=channel_id)
        
        # Get state
        state = get_user_state(call.from_user.id)
        if not state or "private_events" not in state:
            send_and_store_message(call.message.chat.id, call.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=main_menu_keyboard())
            return
            
        # Get events for this type
        events = state["private_events"].get(event_type, [])
        
        if not events:
            send_and_store_message(call.message.chat.id, call.from_user.id, f"–í –∫–∞–Ω–∞–ª–µ {channel.name} –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Ç–∏–ø–∞ {dict(Event.EVENT_TYPE_CHOICES).get(event_type, event_type)}.", reply_markup=back_to_main_menu_keyboard())
            return
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for event in events:
            if event.category not in categories:
                categories[event.category] = []
            categories[event.category].append(event)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        markup = InlineKeyboardMarkup()
        for category in categories.keys():
            display = dict(Event.CATEGORY_CHOICES).get(category, category)
            markup.add(InlineKeyboardButton(f"{display}", callback_data=f"private_cat_{channel_id}_{event_type}_{category}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"private_channel_{channel_id}"))
        
        # Update state
        state["private_type"] = event_type
        state["private_events_by_category"] = {cat: list(evs) for cat, evs in categories.items()}
        update_user_state(call.from_user.id, state)
        
        send_and_store_message(call.message.chat.id, call.from_user.id, f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:", reply_markup=markup)
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.data)

@bot.callback_query_handler(func=lambda call: call.data.startswith("private_cat_"))
def show_private_category_events(call: CallbackQuery):
    try:
        _, _, channel_id, event_type, category = call.data.split("_")
        channel = TelegramChannel.objects.get(id=channel_id)
        
        # Get state
        state = get_user_state(call.from_user.id)
        if not state or "private_events_by_category" not in state:
            send_and_store_message(call.message.chat.id, call.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=main_menu_keyboard())
            return
            
        # Get events for this category
        events = state["private_events_by_category"].get(category, [])
        
        if not events:
            send_and_store_message(call.message.chat.id, call.from_user.id, f"–í –∫–∞–Ω–∞–ª–µ {channel.name} –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {dict(Event.CATEGORY_CHOICES).get(category, category)}.", reply_markup=back_to_main_menu_keyboard())
            return
            
        # Save events in state
        state["events"] = events
        state["is_private"] = True
        update_user_state(call.from_user.id, state)
        
        # Format events list
        text = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–∞–Ω–∞–ª–∞ {channel.name} ({dict(Event.EVENT_TYPE_CHOICES).get(event_type, event_type)}, {dict(Event.CATEGORY_CHOICES).get(category, category)}):\n\n"
        for i, event in enumerate(events, 1):
            weekday = calendar.day_name[event.date_time.weekday()]
            ru_day = {'Saturday': '–°–±', 'Sunday': '–í—Å'}.get(weekday, '')
            date_str = event.date_time.strftime('%d.%m (%H:%M)')
            date_str += f" <b>{ru_day}</b>" if ru_day else ''
            text += f"{i}. {date_str} - {event.name}\n"
        text += "\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
        
        send_and_store_message(call.message.chat.id, call.from_user.id, text, reply_markup=back_to_main_menu_keyboard())
    except Exception as e:
        handle_error(call.message.chat.id, str(e), call.data)

def RunBot():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞!")
        cleanup_thread = start_cleanup_thread()
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise e
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞!")


